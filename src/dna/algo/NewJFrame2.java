/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dna.algo;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Base64;

/**
 *
 * @author yogi
 */
public class NewJFrame2 extends javax.swing.JFrame 
{
      
    static String output = "";
    static String str1="";
    static String joint1="";
    
    /**
     * Creates new form NewJFrame2
     */
    public NewJFrame2() 
    {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jButton1.setText("Recieve");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel1.setText("Encrypted Text:");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jButton2.setText("Decrypt");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel2.setText("Plain Text:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(69, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        jTextArea1.setText(str1);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        jTextField1.setText(output);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException 
    {
        
        
        try
        {
            //System.out.println("In server side");
            
            ReceiverRSA rsa2=new ReceiverRSA();
            
            // connect with client with same port number and accept request of client
            ServerSocket ss1=new ServerSocket(1201);
            Socket s=ss1.accept();
            DataInputStream din=new DataInputStream(s.getInputStream());
            DataOutputStream dout=new DataOutputStream(s.getOutputStream());
            BufferedReader br=new BufferedReader(new InputStreamReader(System.in)); 
            
            //encrypted message from client
            str1=(String)din.readUTF(); 
            //System.out.println("message="+str1);
            
            //generating public and private key for server
            rsa2.ReceiverRSA1();
            
            //reading public key and assigning in joint1 string
            FileReader freader1= new FileReader("Public_receiver_read.key");  
            BufferedReader br2= new BufferedReader(freader1);  
            String kl;  
            while((kl= br2.readLine()) != null) 
            {  
            //System.out.println(kl);  
            joint1=joint1+kl;
            }
            //System.out.println("joint="+joint1);
            
            //sending public key to client
            dout.writeUTF(joint1);
            
            // recieved key1 from client in encrypted form
            String key3=(String)din.readUTF();  
            //System.out.println("key3="+key3);
            
            //decrypting key1 with server private key
            Base64.Decoder decoder=Base64.getDecoder();
            byte[] encrypted =decoder.decode(key3);
            //System.out.println(" in New Frame 2"+encrypted);
            
            byte[] decryptedkey1=rsa2.decryptData(encrypted);
            //System.out.println(" server side="+new String(decryptedkey1));
            String kkk=new String(decryptedkey1);
            
            //storing key1
             BufferedWriter writer = null;
            try
            {
                writer = new BufferedWriter( new FileWriter("Server/key1.txt"));
                writer.write(kkk);

            }
            catch ( IOException e)
            {
            }
            finally
            {
            try
             {
              if (writer != null)
                writer.close( );
              }
             catch (IOException e)
              {
               }
             }
        
            
            
            
            String key4=(String)din.readUTF();//key2 received from client
            
            //decrypting key2 
            byte[] encrypted1=decoder.decode(key4);
            //System.out.println(" in New Frame 2"+encrypted1);
            byte[] decryptedkey2=rsa2.decryptData(encrypted1);
            //System.out.println(" decrypted key2==="+new String(decryptedkey2));
            String kkk1=new String(decryptedkey2);
            
            //storing key2
            BufferedWriter writer1=null;
            try
            {
                writer1= new BufferedWriter( new FileWriter("Server/key2.txt"));
                writer1.write(kkk1);

            }
            catch (IOException e)
            {
            }
            finally
            {
            try
             {
              if (writer1 != null)
                writer1.close( );
              }
             catch (IOException e)
              {
               }
             }
            
            
                    
            //decrypting message of client        
            DecryptionPhase1withThreads dp1=new DecryptionPhase1withThreads();
            String s1=dp1.calculate(str1);
            DecryptionPhase2 dp2=new DecryptionPhase2();
            String ss2=dp2.calculate(s1);
            //System.out.println("\nfinal phase2="+ss2);
            
            //BinarytoHexaDecimal bhd=new BinarytoHexaDecimal();
            //String ss3=bhd.calcualte(ss2);
            
            //used for converting binary to text
            for(int i = 0; i <= ss2.length() - 8; i+=8)
            {
                int k = Integer.parseInt(ss2.substring(i, i+8), 2);
                output += (char) k;
            }   
            /*String [] decryPhase1=kp.calculate();
            for(int k=0;k<decryPhase1.length;k++)
            {
                System.out.print(decryPhase1[k]);
            } */  
            /*String  str2=(String)din.readUTF(); 
            System.out.println("p="+str1);
            System.out.println("g="+str2); 
            p=new BigInteger(str1);
            g=new BigInteger(str2);            
            B=(g.pow((b))).mod(p);
            System.out.println(" B in server="+B);
            String A=(String)din.readUTF();
            System.out.println(" A from client="+A);
            dout.writeUTF(B.toString()); 
            K=new BigInteger(A).pow(b).mod(p);
            System.out.println(" Server side K="+K);
            String key=K.toString(2);
            System.out.println(" Server side K="+key);*//*
            String key1=(String)din.readUTF();
            System.out.println(" Server side K="+key1);
            String value=(String)din.readUTF();
            jTextArea1.setText(value);*/
            
            
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame2().setVisible(true);
            }
        });
    } catch(Exception e){}
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTextArea jTextArea1;
    public javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
