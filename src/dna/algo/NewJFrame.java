/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dna.algo;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author yogi
 */
public class NewJFrame extends javax.swing.JFrame 
{

    static Socket s;
    static DataInputStream din;
    static DataOutputStream dout;
    static String joint="";
    static String joint1="";
    static public byte new_key1[]=null;
    static public byte new_key2[]=null;
    
    static SenderRSA sa=new SenderRSA();
    static ReceiverRSA sa1=new ReceiverRSA();
    
    
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame()
    {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        textArea1 = new java.awt.TextArea();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Encrypt");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        label1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        label1.setName(""); // NOI18N
        label1.setText("Plain Text:");

        label2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        label2.setText("Encrypted Text:");

        jButton2.setText("Send");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 578, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(161, 161, 161)
                        .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:
            String str=jTextField1.getText();
            //System.out.println(" taken form textfield "+str);
            byte[] bytes = str.getBytes();     
            //for(int i=0;i<bytes.length;i++)
             //{
               // System.out.print(bytes[i]);
             //}  
             StringBuilder binary = new StringBuilder();  
             for (byte b : bytes)  
             {  
              int val = b;  
              for (int i = 0; i < 8; i++)  
              {  
                binary.append((val & 128) == 0 ? 0 : 1);  
                val <<= 1;  
              }  
            }
             //reading from file

           byte[] array = Files.readAllBytes(Paths.get("Client/binary.txt"));
           //saving to file
           FileOutputStream fos = new FileOutputStream("Client/binary.txt");
           fos.write(array );
           fos.close();
            String s=binary.toString();
            long startTime = System.currentTimeMillis();
            EncpryptionPhase1withThread ep1= new EncpryptionPhase1withThread();
            String  ss1=new String(ep1.calculate(s));
            //System.out.println(" taken from phase 1 "+ss1);
            EncryptionPhase2withThread ep2=new EncryptionPhase2withThread();
            String ss2= new String(ep2.calculate(ss1));
            //System.out.println(" \ntaken form phas2"+ss2);
            //PrintWriter out = new PrintWriter("filename.txt");
            BufferedWriter writer = null;
            // ... do something ...
            long estimatedTime = System.currentTimeMillis() - startTime;
            try
            {
                writer = new BufferedWriter( new FileWriter("Client/filename.txt"));
                writer.write(ss2);

            }
            catch ( IOException e)
            {
            }
            finally
            {
            try
             {
              if (writer != null)
                writer.close( );
              }
             catch (IOException e)
              {
               }
             }
            //out.println("yogendra");
            textArea1.setText(ss2);
            System.out.println("\ntime taken by encryption ="+estimatedTime);
            
            
            
            
          
        }
        catch (InterruptedException ex) 
        {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
            try
            {    
                
            String str=textArea1.getText();
            dout.writeUTF(str);// sending encrypted message to client
            
            //string str1 is public key of sender
            String str1=(String)din.readUTF(); 
            
            //taking key1 from file and storing in joint string
            FileReader freader = new FileReader("Client/key.txt");  
            BufferedReader br1= new BufferedReader(freader);  
            String s;  
            while((s = br1.readLine()) != null) 
            {  
            //System.out.println(s);  
            joint=joint+s;
            }
            //System.out.println("before encryption joint="+joint);
            sa.SenderRSA1();// calling for generating public and private ke for sender
            
            //taking key2 form file and storing in joint1 string
            FileReader freader1= new FileReader("Client/key2.txt");  
            BufferedReader br2= new BufferedReader(freader1);  
            String s1;  
            while((s1= br2.readLine()) != null) 
            {  
            //System.out.println(s1);  
            joint1=joint1+s1;
            }
            //System.out.println("joint="+joint1);
            
            
            //encrypting both key using server public key
            
            //System.out.println("key from server="+str1);
            new_key1=sa.encryptData(joint,str1);
            new_key2=sa.encryptData(joint1,str1);
            
            //using base64 because to avoid BadPadding error and sending keys after encryption to server
            Base64.Encoder enDecoder= Base64.getEncoder();
            String stringResult= enDecoder.encodeToString(new_key1);
            dout.writeUTF(stringResult);
             
            String stringResult1= enDecoder.encodeToString(new_key2);
            dout.writeUTF(stringResult1);
            
           }
            catch(Exception e)
            {
            }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    { 
        try
        {
            /*BigInteger p,g,A,K;
            int t=1,a;
            p=BigInteger.probablePrime(72, new Random());
            g=BigInteger.probablePrime(72, new Random());
            a=10000;
            System.out.println("a="+a);
            while(t!=0)
            {
                if(p.compareTo(g)==1)
                {
                    t=0;
                }
                else
                {    
                g=BigInteger.probablePrime(72, new Random());
                }
            }
            A=(g.pow(a)).mod(p);
            System.out.println(" A in client="+A);*/
            s=new Socket("127.0.0.1",1201);
            din=new DataInputStream(s.getInputStream());
            dout=new DataOutputStream(s.getOutputStream());
            BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
            
            
            
            
            
            
            
            //dout.writeUTF("yes");
            /*System.out.println(" p="+p+" \n g="+ g);
            dout.writeUTF(p.toString());
            Thread.sleep(1000);
            dout.writeUTF(g.toString());
            dout.writeUTF(A.toString());
            String  B=(String)din.readUTF(); 
            System.out.println(" B from server="+B);
            K=new BigInteger(B).pow(a).mod(p);
            System.out.println(" Client side K="+K);
            String key=K.toString(2);
            /*keyforphase1 kp=new keyforphase1();
            dout.writeUTF(kp.key1);
            String value=textArea1.getText();
            dout.writeUTF(value);*/
            
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() 
        {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
     }
        catch(Exception e){}
      
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JTextField jTextField1;
    private java.awt.Label label1;
    private java.awt.Label label2;
    public static java.awt.TextArea textArea1;
    // End of variables declaration//GEN-END:variables
}
